// <auto-generated />
using System;
using EVBSS.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EVBSS.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250924040233_AddPaymentInvoiceSystem")]
    partial class AddPaymentInvoiceSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EVBSS.Api.Models.BatteryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CapacityWh")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Voltage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("BatteryModels");
                });

            modelBuilder.Entity("EVBSS.Api.Models.BatteryUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatteryModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsReserved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatteryModelId");

                    b.HasIndex("Serial")
                        .IsUnique();

                    b.HasIndex("StationId", "Status");

                    b.HasIndex("StationId", "Status", "IsReserved");

                    b.ToTable("BatteryUnits");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Invoice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BillingPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("BillingPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("KmUsedInPeriod")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OverdueFeeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PaidAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SubtotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserSubscriptionId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FailureReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ProcessedByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("VnpPayDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VnpResponseCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VnpSecureHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VnpTransactionNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VnpTxnRef")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("PaymentReference")
                        .IsUnique();

                    b.HasIndex("ProcessedByStaffId");

                    b.HasIndex("StationId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatteryModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatteryUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("HoldDurationMinutes")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BatteryModelId");

                    b.HasIndex("BatteryUnitId");

                    b.HasIndex("StationId", "Status");

                    b.HasIndex("UserId", "CreatedAt");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Station", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Lng")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("City", "IsActive");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("EVBSS.Api.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BatteryModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("BillingCycleDay")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DepositAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("MaxOverdueMonths")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyFee1500To3000Km")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlyFeeOver3000Km")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MonthlyFeeUnder1500Km")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("OverdueInterestRate")
                        .HasPrecision(5, 4)
                        .HasColumnType("decimal(5,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatteryModelId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("EVBSS.Api.Models.SwapTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("BatteryHealthIssued")
                        .HasColumnType("int");

                    b.Property<int?>("BatteryHealthReturned")
                        .HasColumnType("int");

                    b.Property<DateTime?>("BatteryIssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("BatteryIssuedByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BatteryReceivedByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BatteryReturnedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancellationReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckedInAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CheckedInByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CompletedByStaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("InvoiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<Guid>("IssuedBatteryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IssuedBatterySerial")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("KmChargeAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentType")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReservationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReturnedBatteryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReturnedBatterySerial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("SwapFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TransactionNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserSubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("VehicleOdoAtSwap")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BatteryIssuedByStaffId");

                    b.HasIndex("BatteryReceivedByStaffId");

                    b.HasIndex("CheckedInByStaffId");

                    b.HasIndex("CompletedByStaffId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("IssuedBatteryId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ReturnedBatteryId");

                    b.HasIndex("StationId");

                    b.HasIndex("TransactionNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("UserSubscriptionId");

                    b.HasIndex("VehicleId");

                    b.ToTable("SwapTransactions");
                });

            modelBuilder.Entity("EVBSS.Api.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("EVBSS.Api.Models.UserSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ChargingLimitPercent")
                        .HasColumnType("int");

                    b.Property<int>("ConsecutiveOverdueMonths")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentBillingPeriodEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentBillingPeriodStart")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentMonthKmUsed")
                        .HasColumnType("int");

                    b.Property<decimal>("DepositPaid")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("DepositPaidDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubscriptionPlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubscriptionPlanId");

                    b.HasIndex("VehicleId");

                    b.HasIndex("UserId", "VehicleId", "IsActive");

                    b.ToTable("UserSubscriptions");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompatibleBatteryModelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.HasKey("Id");

                    b.HasIndex("CompatibleBatteryModelId");

                    b.HasIndex("UserId", "Plate")
                        .IsUnique();

                    b.HasIndex("UserId", "VIN")
                        .IsUnique();

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("EVBSS.Api.Models.BatteryUnit", b =>
                {
                    b.HasOne("EVBSS.Api.Models.BatteryModel", "Model")
                        .WithMany()
                        .HasForeignKey("BatteryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Invoice", b =>
                {
                    b.HasOne("EVBSS.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.UserSubscription", "UserSubscription")
                        .WithMany("Invoices")
                        .HasForeignKey("UserSubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");

                    b.Navigation("UserSubscription");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Payment", b =>
                {
                    b.HasOne("EVBSS.Api.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.User", "ProcessedByStaff")
                        .WithMany()
                        .HasForeignKey("ProcessedByStaffId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVBSS.Api.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVBSS.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("ProcessedByStaff");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Reservation", b =>
                {
                    b.HasOne("EVBSS.Api.Models.BatteryModel", "BatteryModel")
                        .WithMany()
                        .HasForeignKey("BatteryModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.BatteryUnit", "BatteryUnit")
                        .WithMany()
                        .HasForeignKey("BatteryUnitId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BatteryModel");

                    b.Navigation("BatteryUnit");

                    b.Navigation("Station");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVBSS.Api.Models.SubscriptionPlan", b =>
                {
                    b.HasOne("EVBSS.Api.Models.BatteryModel", "BatteryModel")
                        .WithMany()
                        .HasForeignKey("BatteryModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BatteryModel");
                });

            modelBuilder.Entity("EVBSS.Api.Models.SwapTransaction", b =>
                {
                    b.HasOne("EVBSS.Api.Models.User", "BatteryIssuedByStaff")
                        .WithMany()
                        .HasForeignKey("BatteryIssuedByStaffId");

                    b.HasOne("EVBSS.Api.Models.User", "BatteryReceivedByStaff")
                        .WithMany()
                        .HasForeignKey("BatteryReceivedByStaffId");

                    b.HasOne("EVBSS.Api.Models.User", "CheckedInByStaff")
                        .WithMany()
                        .HasForeignKey("CheckedInByStaffId");

                    b.HasOne("EVBSS.Api.Models.User", "CompletedByStaff")
                        .WithMany()
                        .HasForeignKey("CompletedByStaffId");

                    b.HasOne("EVBSS.Api.Models.Invoice", "Invoice")
                        .WithMany("SwapTransactions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVBSS.Api.Models.BatteryUnit", "IssuedBattery")
                        .WithMany()
                        .HasForeignKey("IssuedBatteryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.Reservation", "Reservation")
                        .WithMany()
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVBSS.Api.Models.BatteryUnit", "ReturnedBattery")
                        .WithMany()
                        .HasForeignKey("ReturnedBatteryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVBSS.Api.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.UserSubscription", "UserSubscription")
                        .WithMany()
                        .HasForeignKey("UserSubscriptionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EVBSS.Api.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BatteryIssuedByStaff");

                    b.Navigation("BatteryReceivedByStaff");

                    b.Navigation("CheckedInByStaff");

                    b.Navigation("CompletedByStaff");

                    b.Navigation("Invoice");

                    b.Navigation("IssuedBattery");

                    b.Navigation("Reservation");

                    b.Navigation("ReturnedBattery");

                    b.Navigation("Station");

                    b.Navigation("User");

                    b.Navigation("UserSubscription");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVBSS.Api.Models.UserSubscription", b =>
                {
                    b.HasOne("EVBSS.Api.Models.SubscriptionPlan", "SubscriptionPlan")
                        .WithMany()
                        .HasForeignKey("SubscriptionPlanId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SubscriptionPlan");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Vehicle", b =>
                {
                    b.HasOne("EVBSS.Api.Models.BatteryModel", "CompatibleModel")
                        .WithMany()
                        .HasForeignKey("CompatibleBatteryModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EVBSS.Api.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompatibleModel");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EVBSS.Api.Models.Invoice", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("SwapTransactions");
                });

            modelBuilder.Entity("EVBSS.Api.Models.UserSubscription", b =>
                {
                    b.Navigation("Invoices");
                });
#pragma warning restore 612, 618
        }
    }
}
